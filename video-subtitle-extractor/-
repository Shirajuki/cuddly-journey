from imutils.video import FileVideoStream
import cv2
import subprocess
import sys
import numpy
SUBTITLE_BOUNDS_LEFT = 0
SUBTITLE_BOUNDS_RIGHT = 1280
SUBTITLE_BOUNDS_TOP = 620-50
SUBTITLE_BOUNDS_BOTTOM = 720-20

SUBTITLE_BLANK_SPACE_ABOVE = 20
SUBTITLE_BLANK_SPACE_BELOW = 15
SUBTITLES_MIN_VALUE = 200

# We add some blur to the subtitle images before feeding them to Tesseract since
# some pixels within the subtitles are not white enough. This also eliminates
# smaller groups of white pixels outside of the subtitles. A bigger value means
# more blur.
SUBTITLE_IMAGE_BLUR_SIZE = (11, 11)
# After blurring the image we make the image monochrome since that works better
# for Tesseract. This is the limit for what should be considered a (white)
# subtitle pixel after the blur.
SUBTITLES_MIN_VALUE_AFTER_BLUR = 55


def get_millis_for_frame(video, frame_number):
    return 1000.0 * frame_number / video.stream.get(cv2.CAP_PROP_FPS)

def millis_to_srt_timestamp(total_millis):
    (total_seconds, millis) = divmod(total_millis, 1000)
    (total_minutes, seconds) = divmod(total_seconds, 60)
    (hours, minutes) = divmod(total_minutes, 60)
    time_format = '{:02}:{:02}:{:02},{:03}'
    return time_format.format(int(hours), int(minutes), int(seconds), int(millis))

def to_monochrome_subtitle_frame_custom(cropped_frame):
    # see https://tesseract-ocr.github.io/tessdoc/ImproveQuality.html for more
    # information
    img = cv2.cvtColor(cropped_frame, cv2.COLOR_BGR2GRAY)
    # make the image monochr3me where only the whitest pixel are kept white
    img = cv2.threshold(img, SUBTITLES_MIN_VALUE, 255, cv2.THRESH_BINARY)[1]

    bounds_width = SUBTITLE_BOUNDS_RIGHT - SUBTITLE_BOUNDS_LEFT
    bounds_height = SUBTITLE_BOUNDS_BOTTOM - SUBTITLE_BOUNDS_TOP

    whitespace_below_y = bounds_height - SUBTITLE_BLANK_SPACE_BELOW
    above_subtitles = numpy.array([[0, 0], [0, SUBTITLE_BLANK_SPACE_ABOVE],
        [bounds_width, SUBTITLE_BLANK_SPACE_ABOVE], [bounds_width, 0]])
    below_subtitles = numpy.array([[0, whitespace_below_y], [0, bounds_height],
    [bounds_width, bounds_height], [bounds_width, whitespace_below_y]])
    # ensure white above and below text. Some blank space is needed for
    # Tesseract
    img = cv2.fillPoly(img, pts=[above_subtitles, below_subtitles], color=0)

    # Add some blur since some pixels within the subtitles are not completely
    # white. This also eliminates smaller groups of white pixels outside of the
    # subtitles
    #img = cv2.GaussianBlur(img, SUBTITLE_IMAGE_BLUR_SIZE, 0)
    img = cv2.threshold(img, SUBTITLES_MIN_VALUE_AFTER_BLUR, 255, cv2.THRESH_BINARY)[1]
    
    # Invert the colors to have white background with black text.
    img = cv2.bitwise_not(img)
    return img

video = FileVideoStream("../deathparadevn01.mkv")
video.stream.set(cv2.CAP_PROP_POS_FRAMES, 0)

if video.stream.isOpened() == False:
    print('Error opening video stream or file')
print(video)
video.start()
frame = video.read()

with open("nice.txt") as f:
    a = f.read().split("\n")[:-1]
mss = []
for line in a:
    print(line)
    if not line.startswith("Frame:"):
        continue
    line = line.replace("Frame: ", "")
    h, m, s, ms = line.split('__')[0].split('_')
    total_ms = int(ms) + int(s) * 1000 + int(m) * 60 * 1000 + int(h) * 60 * 60 * 1000
    print(h, m, s)
    print(total_ms)
    mss.append(total_ms)

frame_number = 0
mss = mss[::-1]
srt_millis = mss.pop()
print(srt_millis)
while frame is not None:
    if video.stream.get(cv2.CAP_PROP_FPS) <= 0:
        break
    millis = get_millis_for_frame(video, frame_number)
    if srt_millis - 10 < millis < srt_millis + 10:
        print(frame_number, millis, millis_to_srt_timestamp(millis))
        cropped_frame = frame[SUBTITLE_BOUNDS_TOP:SUBTITLE_BOUNDS_BOTTOM, SUBTITLE_BOUNDS_LEFT:SUBTITLE_BOUNDS_RIGHT]
        nframe = to_monochrome_subtitle_frame_custom(cropped_frame)
        cv2.imwrite(f"./test/{str(frame_number).rjust(10,'0')}.png", nframe)
        if frame_number > 3500:
            exit()
        if len(mss) > 0:
            srt_millis = mss.pop()
        else:
            srt_millis = 999999999
    frame_number += 1
    frame = video.read()
